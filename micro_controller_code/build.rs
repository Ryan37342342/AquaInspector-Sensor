use std::env;
use std::fs;
use std::path::Path;
fn main() {
    // defualt setup generated by template
    embuild::espidf::sysenv::output();

    let ssid = env::var("SSID").expect("SSID not provided");
    let password = env::var("PASSWORD").expect("PASSWORD not provided");

    //generate a file in the build dir to be included in the finished binary 
    let out_dir = env::var("OUT_DIR").unwrap();
    let dest_path = Path::new(&out_dir).join("wifi_config.rs");

    fs::write(
        &dest_path,
        format!(
            r#"
            pub const WIFI_SSID: &str = {ssid};
            pub const WIFI_PASSWORD: &str = {password};
            "#,
            ssid = ssid,
            password = password
        ),
    )
    .expect("Failed to write wifi_config.rs");

    // Tell Cargo to rerun the build script if these environment variables change
    println!("cargo:rerun-if-env-changed=SSID");
    println!("cargo:rerun-if-env-changed=PASSWORD");
}
